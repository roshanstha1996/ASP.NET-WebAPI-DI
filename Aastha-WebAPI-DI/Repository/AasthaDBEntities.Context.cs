//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AasthaDBEntities : DbContext
    {
        public AasthaDBEntities()
            : base("name=AasthaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<BillTable> BillTables { get; set; }
        public DbSet<CategoryTable> CategoryTables { get; set; }
        public DbSet<ProductTable> ProductTables { get; set; }
        public DbSet<SalesCodeTable> SalesCodeTables { get; set; }
        public DbSet<SalesTable> SalesTables { get; set; }
        public DbSet<UserTable> UserTables { get; set; }
    
        public virtual int ManageBill(Nullable<int> billId, Nullable<int> salesCodeId, Nullable<decimal> vat, Nullable<decimal> discount, Nullable<decimal> netTotal, Nullable<int> mode)
        {
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("BillId", billId) :
                new ObjectParameter("BillId", typeof(int));
    
            var salesCodeIdParameter = salesCodeId.HasValue ?
                new ObjectParameter("SalesCodeId", salesCodeId) :
                new ObjectParameter("SalesCodeId", typeof(int));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageBill", billIdParameter, salesCodeIdParameter, vatParameter, discountParameter, netTotalParameter, modeParameter);
        }
    
        public virtual int ManageProducts(Nullable<int> productId, Nullable<int> subCategoryId, string productName, Nullable<decimal> rate, Nullable<int> quantityInStock, Nullable<int> thresholdValue, Nullable<System.DateTime> mfgDate, Nullable<System.DateTime> expDate, Nullable<int> mode)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var quantityInStockParameter = quantityInStock.HasValue ?
                new ObjectParameter("QuantityInStock", quantityInStock) :
                new ObjectParameter("QuantityInStock", typeof(int));
    
            var thresholdValueParameter = thresholdValue.HasValue ?
                new ObjectParameter("ThresholdValue", thresholdValue) :
                new ObjectParameter("ThresholdValue", typeof(int));
    
            var mfgDateParameter = mfgDate.HasValue ?
                new ObjectParameter("MfgDate", mfgDate) :
                new ObjectParameter("MfgDate", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageProducts", productIdParameter, subCategoryIdParameter, productNameParameter, rateParameter, quantityInStockParameter, thresholdValueParameter, mfgDateParameter, expDateParameter, modeParameter);
        }
    
        public virtual int ManageSalesCodeTable(Nullable<int> salesCodeId, string customerName, Nullable<System.DateTime> salesDate, string customerEmail, string contactNumber, string address, Nullable<int> mode)
        {
            var salesCodeIdParameter = salesCodeId.HasValue ?
                new ObjectParameter("SalesCodeId", salesCodeId) :
                new ObjectParameter("SalesCodeId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var salesDateParameter = salesDate.HasValue ?
                new ObjectParameter("SalesDate", salesDate) :
                new ObjectParameter("SalesDate", typeof(System.DateTime));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageSalesCodeTable", salesCodeIdParameter, customerNameParameter, salesDateParameter, customerEmailParameter, contactNumberParameter, addressParameter, modeParameter);
        }
    
        public virtual int ManageSalesTable(Nullable<int> salesId, Nullable<int> salesCodeId, string productId, Nullable<int> salesQuantity, Nullable<int> mode)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesCodeIdParameter = salesCodeId.HasValue ?
                new ObjectParameter("SalesCodeId", salesCodeId) :
                new ObjectParameter("SalesCodeId", typeof(int));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var salesQuantityParameter = salesQuantity.HasValue ?
                new ObjectParameter("SalesQuantity", salesQuantity) :
                new ObjectParameter("SalesQuantity", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageSalesTable", salesIdParameter, salesCodeIdParameter, productIdParameter, salesQuantityParameter, modeParameter);
        }
    
        public virtual int ManageUser(Nullable<int> userId, string userName, string password, string userType, string role, string createdBy, string createdDate, string isActive, Nullable<int> mode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageUser", userIdParameter, userNameParameter, passwordParameter, userTypeParameter, roleParameter, createdByParameter, createdDateParameter, isActiveParameter, modeParameter);
        }
    
        public virtual int SP_ManageCategory(Nullable<int> categoryId, string categoryName, string description, Nullable<int> mode)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ManageCategory", categoryIdParameter, categoryNameParameter, descriptionParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetSalesReportByDate_Result> GetSalesReportByDate(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesReportByDate_Result>("GetSalesReportByDate", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<GetSalesReportByDate_Result> SalesReportByDate(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesReportByDate_Result>("SalesReportByDate", fromdateParameter, todateParameter);
        }
    }
}
